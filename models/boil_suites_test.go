// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Caches", testCaches)
	t.Run("Conversations", testConversations)
	t.Run("GooseDBVersions", testGooseDBVersions)
	t.Run("Memories", testMemories)
	t.Run("MemoryFragments", testMemoryFragments)
	t.Run("Messages", testMessages)
}

func TestDelete(t *testing.T) {
	t.Run("Caches", testCachesDelete)
	t.Run("Conversations", testConversationsDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
	t.Run("Memories", testMemoriesDelete)
	t.Run("MemoryFragments", testMemoryFragmentsDelete)
	t.Run("Messages", testMessagesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Caches", testCachesQueryDeleteAll)
	t.Run("Conversations", testConversationsQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
	t.Run("Memories", testMemoriesQueryDeleteAll)
	t.Run("MemoryFragments", testMemoryFragmentsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Caches", testCachesSliceDeleteAll)
	t.Run("Conversations", testConversationsSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
	t.Run("Memories", testMemoriesSliceDeleteAll)
	t.Run("MemoryFragments", testMemoryFragmentsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Caches", testCachesExists)
	t.Run("Conversations", testConversationsExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
	t.Run("Memories", testMemoriesExists)
	t.Run("MemoryFragments", testMemoryFragmentsExists)
	t.Run("Messages", testMessagesExists)
}

func TestFind(t *testing.T) {
	t.Run("Caches", testCachesFind)
	t.Run("Conversations", testConversationsFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
	t.Run("Memories", testMemoriesFind)
	t.Run("MemoryFragments", testMemoryFragmentsFind)
	t.Run("Messages", testMessagesFind)
}

func TestBind(t *testing.T) {
	t.Run("Caches", testCachesBind)
	t.Run("Conversations", testConversationsBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
	t.Run("Memories", testMemoriesBind)
	t.Run("MemoryFragments", testMemoryFragmentsBind)
	t.Run("Messages", testMessagesBind)
}

func TestOne(t *testing.T) {
	t.Run("Caches", testCachesOne)
	t.Run("Conversations", testConversationsOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
	t.Run("Memories", testMemoriesOne)
	t.Run("MemoryFragments", testMemoryFragmentsOne)
	t.Run("Messages", testMessagesOne)
}

func TestAll(t *testing.T) {
	t.Run("Caches", testCachesAll)
	t.Run("Conversations", testConversationsAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
	t.Run("Memories", testMemoriesAll)
	t.Run("MemoryFragments", testMemoryFragmentsAll)
	t.Run("Messages", testMessagesAll)
}

func TestCount(t *testing.T) {
	t.Run("Caches", testCachesCount)
	t.Run("Conversations", testConversationsCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
	t.Run("Memories", testMemoriesCount)
	t.Run("MemoryFragments", testMemoryFragmentsCount)
	t.Run("Messages", testMessagesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Caches", testCachesHooks)
	t.Run("Conversations", testConversationsHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
	t.Run("Memories", testMemoriesHooks)
	t.Run("MemoryFragments", testMemoryFragmentsHooks)
	t.Run("Messages", testMessagesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Caches", testCachesInsert)
	t.Run("Caches", testCachesInsertWhitelist)
	t.Run("Conversations", testConversationsInsert)
	t.Run("Conversations", testConversationsInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
	t.Run("Memories", testMemoriesInsert)
	t.Run("Memories", testMemoriesInsertWhitelist)
	t.Run("MemoryFragments", testMemoryFragmentsInsert)
	t.Run("MemoryFragments", testMemoryFragmentsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Caches", testCachesReload)
	t.Run("Conversations", testConversationsReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
	t.Run("Memories", testMemoriesReload)
	t.Run("MemoryFragments", testMemoryFragmentsReload)
	t.Run("Messages", testMessagesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Caches", testCachesReloadAll)
	t.Run("Conversations", testConversationsReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
	t.Run("Memories", testMemoriesReloadAll)
	t.Run("MemoryFragments", testMemoryFragmentsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Caches", testCachesSelect)
	t.Run("Conversations", testConversationsSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
	t.Run("Memories", testMemoriesSelect)
	t.Run("MemoryFragments", testMemoryFragmentsSelect)
	t.Run("Messages", testMessagesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Caches", testCachesUpdate)
	t.Run("Conversations", testConversationsUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
	t.Run("Memories", testMemoriesUpdate)
	t.Run("MemoryFragments", testMemoryFragmentsUpdate)
	t.Run("Messages", testMessagesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Caches", testCachesSliceUpdateAll)
	t.Run("Conversations", testConversationsSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
	t.Run("Memories", testMemoriesSliceUpdateAll)
	t.Run("MemoryFragments", testMemoryFragmentsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
}
