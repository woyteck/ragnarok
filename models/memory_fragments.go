// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MemoryFragment is an object representing the database table.
type MemoryFragment struct {
	UUID            string      `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	ContentOriginal null.String `boil:"content_original" json:"content_original,omitempty" toml:"content_original" yaml:"content_original,omitempty"`
	ContentRefined  null.String `boil:"content_refined" json:"content_refined,omitempty" toml:"content_refined" yaml:"content_refined,omitempty"`
	IsRefined       null.Bool   `boil:"is_refined" json:"is_refined,omitempty" toml:"is_refined" yaml:"is_refined,omitempty"`
	IsEmbedded      null.Bool   `boil:"is_embedded" json:"is_embedded,omitempty" toml:"is_embedded" yaml:"is_embedded,omitempty"`
	MemoryID        null.String `boil:"memory_id" json:"memory_id,omitempty" toml:"memory_id" yaml:"memory_id,omitempty"`

	R *memoryFragmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memoryFragmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemoryFragmentColumns = struct {
	UUID            string
	CreatedAt       string
	ContentOriginal string
	ContentRefined  string
	IsRefined       string
	IsEmbedded      string
	MemoryID        string
}{
	UUID:            "uuid",
	CreatedAt:       "created_at",
	ContentOriginal: "content_original",
	ContentRefined:  "content_refined",
	IsRefined:       "is_refined",
	IsEmbedded:      "is_embedded",
	MemoryID:        "memory_id",
}

var MemoryFragmentTableColumns = struct {
	UUID            string
	CreatedAt       string
	ContentOriginal string
	ContentRefined  string
	IsRefined       string
	IsEmbedded      string
	MemoryID        string
}{
	UUID:            "memory_fragments.uuid",
	CreatedAt:       "memory_fragments.created_at",
	ContentOriginal: "memory_fragments.content_original",
	ContentRefined:  "memory_fragments.content_refined",
	IsRefined:       "memory_fragments.is_refined",
	IsEmbedded:      "memory_fragments.is_embedded",
	MemoryID:        "memory_fragments.memory_id",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MemoryFragmentWhere = struct {
	UUID            whereHelperstring
	CreatedAt       whereHelpernull_Time
	ContentOriginal whereHelpernull_String
	ContentRefined  whereHelpernull_String
	IsRefined       whereHelpernull_Bool
	IsEmbedded      whereHelpernull_Bool
	MemoryID        whereHelpernull_String
}{
	UUID:            whereHelperstring{field: "\"memory_fragments\".\"uuid\""},
	CreatedAt:       whereHelpernull_Time{field: "\"memory_fragments\".\"created_at\""},
	ContentOriginal: whereHelpernull_String{field: "\"memory_fragments\".\"content_original\""},
	ContentRefined:  whereHelpernull_String{field: "\"memory_fragments\".\"content_refined\""},
	IsRefined:       whereHelpernull_Bool{field: "\"memory_fragments\".\"is_refined\""},
	IsEmbedded:      whereHelpernull_Bool{field: "\"memory_fragments\".\"is_embedded\""},
	MemoryID:        whereHelpernull_String{field: "\"memory_fragments\".\"memory_id\""},
}

// MemoryFragmentRels is where relationship names are stored.
var MemoryFragmentRels = struct {
	Memory string
}{
	Memory: "Memory",
}

// memoryFragmentR is where relationships are stored.
type memoryFragmentR struct {
	Memory *Memory `boil:"Memory" json:"Memory" toml:"Memory" yaml:"Memory"`
}

// NewStruct creates a new relationship struct
func (*memoryFragmentR) NewStruct() *memoryFragmentR {
	return &memoryFragmentR{}
}

func (r *memoryFragmentR) GetMemory() *Memory {
	if r == nil {
		return nil
	}
	return r.Memory
}

// memoryFragmentL is where Load methods for each relationship are stored.
type memoryFragmentL struct{}

var (
	memoryFragmentAllColumns            = []string{"uuid", "created_at", "content_original", "content_refined", "is_refined", "is_embedded", "memory_id"}
	memoryFragmentColumnsWithoutDefault = []string{"uuid"}
	memoryFragmentColumnsWithDefault    = []string{"created_at", "content_original", "content_refined", "is_refined", "is_embedded", "memory_id"}
	memoryFragmentPrimaryKeyColumns     = []string{"uuid"}
	memoryFragmentGeneratedColumns      = []string{}
)

type (
	// MemoryFragmentSlice is an alias for a slice of pointers to MemoryFragment.
	// This should almost always be used instead of []MemoryFragment.
	MemoryFragmentSlice []*MemoryFragment
	// MemoryFragmentHook is the signature for custom MemoryFragment hook methods
	MemoryFragmentHook func(context.Context, boil.ContextExecutor, *MemoryFragment) error

	memoryFragmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memoryFragmentType                 = reflect.TypeOf(&MemoryFragment{})
	memoryFragmentMapping              = queries.MakeStructMapping(memoryFragmentType)
	memoryFragmentPrimaryKeyMapping, _ = queries.BindMapping(memoryFragmentType, memoryFragmentMapping, memoryFragmentPrimaryKeyColumns)
	memoryFragmentInsertCacheMut       sync.RWMutex
	memoryFragmentInsertCache          = make(map[string]insertCache)
	memoryFragmentUpdateCacheMut       sync.RWMutex
	memoryFragmentUpdateCache          = make(map[string]updateCache)
	memoryFragmentUpsertCacheMut       sync.RWMutex
	memoryFragmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memoryFragmentAfterSelectMu sync.Mutex
var memoryFragmentAfterSelectHooks []MemoryFragmentHook

var memoryFragmentBeforeInsertMu sync.Mutex
var memoryFragmentBeforeInsertHooks []MemoryFragmentHook
var memoryFragmentAfterInsertMu sync.Mutex
var memoryFragmentAfterInsertHooks []MemoryFragmentHook

var memoryFragmentBeforeUpdateMu sync.Mutex
var memoryFragmentBeforeUpdateHooks []MemoryFragmentHook
var memoryFragmentAfterUpdateMu sync.Mutex
var memoryFragmentAfterUpdateHooks []MemoryFragmentHook

var memoryFragmentBeforeDeleteMu sync.Mutex
var memoryFragmentBeforeDeleteHooks []MemoryFragmentHook
var memoryFragmentAfterDeleteMu sync.Mutex
var memoryFragmentAfterDeleteHooks []MemoryFragmentHook

var memoryFragmentBeforeUpsertMu sync.Mutex
var memoryFragmentBeforeUpsertHooks []MemoryFragmentHook
var memoryFragmentAfterUpsertMu sync.Mutex
var memoryFragmentAfterUpsertHooks []MemoryFragmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MemoryFragment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MemoryFragment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MemoryFragment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MemoryFragment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MemoryFragment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MemoryFragment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MemoryFragment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MemoryFragment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MemoryFragment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryFragmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemoryFragmentHook registers your hook function for all future operations.
func AddMemoryFragmentHook(hookPoint boil.HookPoint, memoryFragmentHook MemoryFragmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memoryFragmentAfterSelectMu.Lock()
		memoryFragmentAfterSelectHooks = append(memoryFragmentAfterSelectHooks, memoryFragmentHook)
		memoryFragmentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		memoryFragmentBeforeInsertMu.Lock()
		memoryFragmentBeforeInsertHooks = append(memoryFragmentBeforeInsertHooks, memoryFragmentHook)
		memoryFragmentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		memoryFragmentAfterInsertMu.Lock()
		memoryFragmentAfterInsertHooks = append(memoryFragmentAfterInsertHooks, memoryFragmentHook)
		memoryFragmentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		memoryFragmentBeforeUpdateMu.Lock()
		memoryFragmentBeforeUpdateHooks = append(memoryFragmentBeforeUpdateHooks, memoryFragmentHook)
		memoryFragmentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		memoryFragmentAfterUpdateMu.Lock()
		memoryFragmentAfterUpdateHooks = append(memoryFragmentAfterUpdateHooks, memoryFragmentHook)
		memoryFragmentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		memoryFragmentBeforeDeleteMu.Lock()
		memoryFragmentBeforeDeleteHooks = append(memoryFragmentBeforeDeleteHooks, memoryFragmentHook)
		memoryFragmentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		memoryFragmentAfterDeleteMu.Lock()
		memoryFragmentAfterDeleteHooks = append(memoryFragmentAfterDeleteHooks, memoryFragmentHook)
		memoryFragmentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		memoryFragmentBeforeUpsertMu.Lock()
		memoryFragmentBeforeUpsertHooks = append(memoryFragmentBeforeUpsertHooks, memoryFragmentHook)
		memoryFragmentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		memoryFragmentAfterUpsertMu.Lock()
		memoryFragmentAfterUpsertHooks = append(memoryFragmentAfterUpsertHooks, memoryFragmentHook)
		memoryFragmentAfterUpsertMu.Unlock()
	}
}

// One returns a single memoryFragment record from the query.
func (q memoryFragmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MemoryFragment, error) {
	o := &MemoryFragment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for memory_fragments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MemoryFragment records from the query.
func (q memoryFragmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemoryFragmentSlice, error) {
	var o []*MemoryFragment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MemoryFragment slice")
	}

	if len(memoryFragmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MemoryFragment records in the query.
func (q memoryFragmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count memory_fragments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memoryFragmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if memory_fragments exists")
	}

	return count > 0, nil
}

// Memory pointed to by the foreign key.
func (o *MemoryFragment) Memory(mods ...qm.QueryMod) memoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.MemoryID),
	}

	queryMods = append(queryMods, mods...)

	return Memories(queryMods...)
}

// LoadMemory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memoryFragmentL) LoadMemory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMemoryFragment interface{}, mods queries.Applicator) error {
	var slice []*MemoryFragment
	var object *MemoryFragment

	if singular {
		var ok bool
		object, ok = maybeMemoryFragment.(*MemoryFragment)
		if !ok {
			object = new(MemoryFragment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMemoryFragment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMemoryFragment))
			}
		}
	} else {
		s, ok := maybeMemoryFragment.(*[]*MemoryFragment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMemoryFragment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMemoryFragment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memoryFragmentR{}
		}
		if !queries.IsNil(object.MemoryID) {
			args[object.MemoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memoryFragmentR{}
			}

			if !queries.IsNil(obj.MemoryID) {
				args[obj.MemoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`memories`),
		qm.WhereIn(`memories.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Memory")
	}

	var resultSlice []*Memory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Memory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for memories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for memories")
	}

	if len(memoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Memory = foreign
		if foreign.R == nil {
			foreign.R = &memoryR{}
		}
		foreign.R.MemoryFragments = append(foreign.R.MemoryFragments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MemoryID, foreign.UUID) {
				local.R.Memory = foreign
				if foreign.R == nil {
					foreign.R = &memoryR{}
				}
				foreign.R.MemoryFragments = append(foreign.R.MemoryFragments, local)
				break
			}
		}
	}

	return nil
}

// SetMemory of the memoryFragment to the related item.
// Sets o.R.Memory to related.
// Adds o to related.R.MemoryFragments.
func (o *MemoryFragment) SetMemory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Memory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"memory_fragments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"memory_id"}),
		strmangle.WhereClause("\"", "\"", 2, memoryFragmentPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MemoryID, related.UUID)
	if o.R == nil {
		o.R = &memoryFragmentR{
			Memory: related,
		}
	} else {
		o.R.Memory = related
	}

	if related.R == nil {
		related.R = &memoryR{
			MemoryFragments: MemoryFragmentSlice{o},
		}
	} else {
		related.R.MemoryFragments = append(related.R.MemoryFragments, o)
	}

	return nil
}

// RemoveMemory relationship.
// Sets o.R.Memory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MemoryFragment) RemoveMemory(ctx context.Context, exec boil.ContextExecutor, related *Memory) error {
	var err error

	queries.SetScanner(&o.MemoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("memory_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Memory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MemoryFragments {
		if queries.Equal(o.MemoryID, ri.MemoryID) {
			continue
		}

		ln := len(related.R.MemoryFragments)
		if ln > 1 && i < ln-1 {
			related.R.MemoryFragments[i] = related.R.MemoryFragments[ln-1]
		}
		related.R.MemoryFragments = related.R.MemoryFragments[:ln-1]
		break
	}
	return nil
}

// MemoryFragments retrieves all the records using an executor.
func MemoryFragments(mods ...qm.QueryMod) memoryFragmentQuery {
	mods = append(mods, qm.From("\"memory_fragments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"memory_fragments\".*"})
	}

	return memoryFragmentQuery{q}
}

// FindMemoryFragment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMemoryFragment(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*MemoryFragment, error) {
	memoryFragmentObj := &MemoryFragment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"memory_fragments\" where \"uuid\"=$1", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, memoryFragmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from memory_fragments")
	}

	if err = memoryFragmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memoryFragmentObj, err
	}

	return memoryFragmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MemoryFragment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no memory_fragments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memoryFragmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memoryFragmentInsertCacheMut.RLock()
	cache, cached := memoryFragmentInsertCache[key]
	memoryFragmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memoryFragmentAllColumns,
			memoryFragmentColumnsWithDefault,
			memoryFragmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memoryFragmentType, memoryFragmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memoryFragmentType, memoryFragmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"memory_fragments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"memory_fragments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into memory_fragments")
	}

	if !cached {
		memoryFragmentInsertCacheMut.Lock()
		memoryFragmentInsertCache[key] = cache
		memoryFragmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MemoryFragment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MemoryFragment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memoryFragmentUpdateCacheMut.RLock()
	cache, cached := memoryFragmentUpdateCache[key]
	memoryFragmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memoryFragmentAllColumns,
			memoryFragmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update memory_fragments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"memory_fragments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, memoryFragmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memoryFragmentType, memoryFragmentMapping, append(wl, memoryFragmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update memory_fragments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for memory_fragments")
	}

	if !cached {
		memoryFragmentUpdateCacheMut.Lock()
		memoryFragmentUpdateCache[key] = cache
		memoryFragmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q memoryFragmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for memory_fragments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for memory_fragments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemoryFragmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memoryFragmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"memory_fragments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, memoryFragmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in memoryFragment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all memoryFragment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MemoryFragment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no memory_fragments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memoryFragmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memoryFragmentUpsertCacheMut.RLock()
	cache, cached := memoryFragmentUpsertCache[key]
	memoryFragmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			memoryFragmentAllColumns,
			memoryFragmentColumnsWithDefault,
			memoryFragmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memoryFragmentAllColumns,
			memoryFragmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert memory_fragments, could not build update column list")
		}

		ret := strmangle.SetComplement(memoryFragmentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(memoryFragmentPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert memory_fragments, could not build conflict column list")
			}

			conflict = make([]string, len(memoryFragmentPrimaryKeyColumns))
			copy(conflict, memoryFragmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"memory_fragments\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(memoryFragmentType, memoryFragmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memoryFragmentType, memoryFragmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert memory_fragments")
	}

	if !cached {
		memoryFragmentUpsertCacheMut.Lock()
		memoryFragmentUpsertCache[key] = cache
		memoryFragmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MemoryFragment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MemoryFragment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MemoryFragment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memoryFragmentPrimaryKeyMapping)
	sql := "DELETE FROM \"memory_fragments\" WHERE \"uuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from memory_fragments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for memory_fragments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memoryFragmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memoryFragmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memory_fragments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for memory_fragments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemoryFragmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memoryFragmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memoryFragmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"memory_fragments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memoryFragmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memoryFragment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for memory_fragments")
	}

	if len(memoryFragmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MemoryFragment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMemoryFragment(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemoryFragmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemoryFragmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memoryFragmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"memory_fragments\".* FROM \"memory_fragments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memoryFragmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemoryFragmentSlice")
	}

	*o = slice

	return nil
}

// MemoryFragmentExists checks if the MemoryFragment row exists.
func MemoryFragmentExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"memory_fragments\" where \"uuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if memory_fragments exists")
	}

	return exists, nil
}

// Exists checks if the MemoryFragment row exists.
func (o *MemoryFragment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MemoryFragmentExists(ctx, exec, o.UUID)
}
