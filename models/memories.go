// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Memory is an object representing the database table.
type Memory struct {
	UUID       string      `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt  null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	MemoryType string      `boil:"memory_type" json:"memory_type" toml:"memory_type" yaml:"memory_type"`
	Source     null.String `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`
	Content    null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`

	R *memoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemoryColumns = struct {
	UUID       string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
	MemoryType string
	Source     string
	Content    string
}{
	UUID:       "uuid",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
	MemoryType: "memory_type",
	Source:     "source",
	Content:    "content",
}

var MemoryTableColumns = struct {
	UUID       string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
	MemoryType string
	Source     string
	Content    string
}{
	UUID:       "memories.uuid",
	CreatedAt:  "memories.created_at",
	UpdatedAt:  "memories.updated_at",
	DeletedAt:  "memories.deleted_at",
	MemoryType: "memories.memory_type",
	Source:     "memories.source",
	Content:    "memories.content",
}

// Generated where

var MemoryWhere = struct {
	UUID       whereHelperstring
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	DeletedAt  whereHelpernull_Time
	MemoryType whereHelperstring
	Source     whereHelpernull_String
	Content    whereHelpernull_String
}{
	UUID:       whereHelperstring{field: "\"memories\".\"uuid\""},
	CreatedAt:  whereHelpernull_Time{field: "\"memories\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"memories\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"memories\".\"deleted_at\""},
	MemoryType: whereHelperstring{field: "\"memories\".\"memory_type\""},
	Source:     whereHelpernull_String{field: "\"memories\".\"source\""},
	Content:    whereHelpernull_String{field: "\"memories\".\"content\""},
}

// MemoryRels is where relationship names are stored.
var MemoryRels = struct {
	MemoryFragments string
}{
	MemoryFragments: "MemoryFragments",
}

// memoryR is where relationships are stored.
type memoryR struct {
	MemoryFragments MemoryFragmentSlice `boil:"MemoryFragments" json:"MemoryFragments" toml:"MemoryFragments" yaml:"MemoryFragments"`
}

// NewStruct creates a new relationship struct
func (*memoryR) NewStruct() *memoryR {
	return &memoryR{}
}

func (r *memoryR) GetMemoryFragments() MemoryFragmentSlice {
	if r == nil {
		return nil
	}
	return r.MemoryFragments
}

// memoryL is where Load methods for each relationship are stored.
type memoryL struct{}

var (
	memoryAllColumns            = []string{"uuid", "created_at", "updated_at", "deleted_at", "memory_type", "source", "content"}
	memoryColumnsWithoutDefault = []string{"uuid", "memory_type"}
	memoryColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at", "source", "content"}
	memoryPrimaryKeyColumns     = []string{"uuid"}
	memoryGeneratedColumns      = []string{}
)

type (
	// MemorySlice is an alias for a slice of pointers to Memory.
	// This should almost always be used instead of []Memory.
	MemorySlice []*Memory
	// MemoryHook is the signature for custom Memory hook methods
	MemoryHook func(context.Context, boil.ContextExecutor, *Memory) error

	memoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memoryType                 = reflect.TypeOf(&Memory{})
	memoryMapping              = queries.MakeStructMapping(memoryType)
	memoryPrimaryKeyMapping, _ = queries.BindMapping(memoryType, memoryMapping, memoryPrimaryKeyColumns)
	memoryInsertCacheMut       sync.RWMutex
	memoryInsertCache          = make(map[string]insertCache)
	memoryUpdateCacheMut       sync.RWMutex
	memoryUpdateCache          = make(map[string]updateCache)
	memoryUpsertCacheMut       sync.RWMutex
	memoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var memoryAfterSelectMu sync.Mutex
var memoryAfterSelectHooks []MemoryHook

var memoryBeforeInsertMu sync.Mutex
var memoryBeforeInsertHooks []MemoryHook
var memoryAfterInsertMu sync.Mutex
var memoryAfterInsertHooks []MemoryHook

var memoryBeforeUpdateMu sync.Mutex
var memoryBeforeUpdateHooks []MemoryHook
var memoryAfterUpdateMu sync.Mutex
var memoryAfterUpdateHooks []MemoryHook

var memoryBeforeDeleteMu sync.Mutex
var memoryBeforeDeleteHooks []MemoryHook
var memoryAfterDeleteMu sync.Mutex
var memoryAfterDeleteHooks []MemoryHook

var memoryBeforeUpsertMu sync.Mutex
var memoryBeforeUpsertHooks []MemoryHook
var memoryAfterUpsertMu sync.Mutex
var memoryAfterUpsertHooks []MemoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Memory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Memory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Memory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Memory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Memory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Memory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Memory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Memory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Memory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range memoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMemoryHook registers your hook function for all future operations.
func AddMemoryHook(hookPoint boil.HookPoint, memoryHook MemoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		memoryAfterSelectMu.Lock()
		memoryAfterSelectHooks = append(memoryAfterSelectHooks, memoryHook)
		memoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		memoryBeforeInsertMu.Lock()
		memoryBeforeInsertHooks = append(memoryBeforeInsertHooks, memoryHook)
		memoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		memoryAfterInsertMu.Lock()
		memoryAfterInsertHooks = append(memoryAfterInsertHooks, memoryHook)
		memoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		memoryBeforeUpdateMu.Lock()
		memoryBeforeUpdateHooks = append(memoryBeforeUpdateHooks, memoryHook)
		memoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		memoryAfterUpdateMu.Lock()
		memoryAfterUpdateHooks = append(memoryAfterUpdateHooks, memoryHook)
		memoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		memoryBeforeDeleteMu.Lock()
		memoryBeforeDeleteHooks = append(memoryBeforeDeleteHooks, memoryHook)
		memoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		memoryAfterDeleteMu.Lock()
		memoryAfterDeleteHooks = append(memoryAfterDeleteHooks, memoryHook)
		memoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		memoryBeforeUpsertMu.Lock()
		memoryBeforeUpsertHooks = append(memoryBeforeUpsertHooks, memoryHook)
		memoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		memoryAfterUpsertMu.Lock()
		memoryAfterUpsertHooks = append(memoryAfterUpsertHooks, memoryHook)
		memoryAfterUpsertMu.Unlock()
	}
}

// One returns a single memory record from the query.
func (q memoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Memory, error) {
	o := &Memory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for memories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Memory records from the query.
func (q memoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (MemorySlice, error) {
	var o []*Memory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Memory slice")
	}

	if len(memoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Memory records in the query.
func (q memoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count memories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if memories exists")
	}

	return count > 0, nil
}

// MemoryFragments retrieves all the memory_fragment's MemoryFragments with an executor.
func (o *Memory) MemoryFragments(mods ...qm.QueryMod) memoryFragmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"memory_fragments\".\"memory_id\"=?", o.UUID),
	)

	return MemoryFragments(queryMods...)
}

// LoadMemoryFragments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memoryL) LoadMemoryFragments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMemory interface{}, mods queries.Applicator) error {
	var slice []*Memory
	var object *Memory

	if singular {
		var ok bool
		object, ok = maybeMemory.(*Memory)
		if !ok {
			object = new(Memory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMemory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMemory))
			}
		}
	} else {
		s, ok := maybeMemory.(*[]*Memory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMemory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMemory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &memoryR{}
		}
		args[object.UUID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memoryR{}
			}
			args[obj.UUID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`memory_fragments`),
		qm.WhereIn(`memory_fragments.memory_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load memory_fragments")
	}

	var resultSlice []*MemoryFragment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice memory_fragments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on memory_fragments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for memory_fragments")
	}

	if len(memoryFragmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MemoryFragments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &memoryFragmentR{}
			}
			foreign.R.Memory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UUID, foreign.MemoryID) {
				local.R.MemoryFragments = append(local.R.MemoryFragments, foreign)
				if foreign.R == nil {
					foreign.R = &memoryFragmentR{}
				}
				foreign.R.Memory = local
				break
			}
		}
	}

	return nil
}

// AddMemoryFragments adds the given related objects to the existing relationships
// of the memory, optionally inserting them as new records.
// Appends related to o.R.MemoryFragments.
// Sets related.R.Memory appropriately.
func (o *Memory) AddMemoryFragments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MemoryFragment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MemoryID, o.UUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"memory_fragments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"memory_id"}),
				strmangle.WhereClause("\"", "\"", 2, memoryFragmentPrimaryKeyColumns),
			)
			values := []interface{}{o.UUID, rel.UUID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MemoryID, o.UUID)
		}
	}

	if o.R == nil {
		o.R = &memoryR{
			MemoryFragments: related,
		}
	} else {
		o.R.MemoryFragments = append(o.R.MemoryFragments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &memoryFragmentR{
				Memory: o,
			}
		} else {
			rel.R.Memory = o
		}
	}
	return nil
}

// SetMemoryFragments removes all previously related items of the
// memory replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Memory's MemoryFragments accordingly.
// Replaces o.R.MemoryFragments with related.
// Sets related.R.Memory's MemoryFragments accordingly.
func (o *Memory) SetMemoryFragments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MemoryFragment) error {
	query := "update \"memory_fragments\" set \"memory_id\" = null where \"memory_id\" = $1"
	values := []interface{}{o.UUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MemoryFragments {
			queries.SetScanner(&rel.MemoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Memory = nil
		}
		o.R.MemoryFragments = nil
	}

	return o.AddMemoryFragments(ctx, exec, insert, related...)
}

// RemoveMemoryFragments relationships from objects passed in.
// Removes related items from R.MemoryFragments (uses pointer comparison, removal does not keep order)
// Sets related.R.Memory.
func (o *Memory) RemoveMemoryFragments(ctx context.Context, exec boil.ContextExecutor, related ...*MemoryFragment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MemoryID, nil)
		if rel.R != nil {
			rel.R.Memory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("memory_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MemoryFragments {
			if rel != ri {
				continue
			}

			ln := len(o.R.MemoryFragments)
			if ln > 1 && i < ln-1 {
				o.R.MemoryFragments[i] = o.R.MemoryFragments[ln-1]
			}
			o.R.MemoryFragments = o.R.MemoryFragments[:ln-1]
			break
		}
	}

	return nil
}

// Memories retrieves all the records using an executor.
func Memories(mods ...qm.QueryMod) memoryQuery {
	mods = append(mods, qm.From("\"memories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"memories\".*"})
	}

	return memoryQuery{q}
}

// FindMemory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMemory(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*Memory, error) {
	memoryObj := &Memory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"memories\" where \"uuid\"=$1", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, memoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from memories")
	}

	if err = memoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return memoryObj, err
	}

	return memoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Memory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no memories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memoryInsertCacheMut.RLock()
	cache, cached := memoryInsertCache[key]
	memoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memoryAllColumns,
			memoryColumnsWithDefault,
			memoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memoryType, memoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memoryType, memoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"memories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"memories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into memories")
	}

	if !cached {
		memoryInsertCacheMut.Lock()
		memoryInsertCache[key] = cache
		memoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Memory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Memory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	memoryUpdateCacheMut.RLock()
	cache, cached := memoryUpdateCache[key]
	memoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memoryAllColumns,
			memoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update memories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"memories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, memoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memoryType, memoryMapping, append(wl, memoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update memories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for memories")
	}

	if !cached {
		memoryUpdateCacheMut.Lock()
		memoryUpdateCache[key] = cache
		memoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q memoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for memories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for memories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"memories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, memoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in memory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all memory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Memory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no memories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(memoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memoryUpsertCacheMut.RLock()
	cache, cached := memoryUpsertCache[key]
	memoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			memoryAllColumns,
			memoryColumnsWithDefault,
			memoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memoryAllColumns,
			memoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert memories, could not build update column list")
		}

		ret := strmangle.SetComplement(memoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(memoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert memories, could not build conflict column list")
			}

			conflict = make([]string, len(memoryPrimaryKeyColumns))
			copy(conflict, memoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"memories\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(memoryType, memoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memoryType, memoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert memories")
	}

	if !cached {
		memoryUpsertCacheMut.Lock()
		memoryUpsertCache[key] = cache
		memoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Memory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Memory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Memory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memoryPrimaryKeyMapping)
	sql := "DELETE FROM \"memories\" WHERE \"uuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from memories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for memories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for memories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(memoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"memories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from memory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for memories")
	}

	if len(memoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Memory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMemory(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"memories\".* FROM \"memories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, memoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemorySlice")
	}

	*o = slice

	return nil
}

// MemoryExists checks if the Memory row exists.
func MemoryExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"memories\" where \"uuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if memories exists")
	}

	return exists, nil
}

// Exists checks if the Memory row exists.
func (o *Memory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MemoryExists(ctx, exec, o.UUID)
}
