// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMemoryFragments(t *testing.T) {
	t.Parallel()

	query := MemoryFragments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMemoryFragmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemoryFragmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MemoryFragments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemoryFragmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemoryFragmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMemoryFragmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MemoryFragmentExists(ctx, tx, o.UUID)
	if err != nil {
		t.Errorf("Unable to check if MemoryFragment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MemoryFragmentExists to return true, but got false.")
	}
}

func testMemoryFragmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	memoryFragmentFound, err := FindMemoryFragment(ctx, tx, o.UUID)
	if err != nil {
		t.Error(err)
	}

	if memoryFragmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMemoryFragmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MemoryFragments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMemoryFragmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MemoryFragments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMemoryFragmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	memoryFragmentOne := &MemoryFragment{}
	memoryFragmentTwo := &MemoryFragment{}
	if err = randomize.Struct(seed, memoryFragmentOne, memoryFragmentDBTypes, false, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}
	if err = randomize.Struct(seed, memoryFragmentTwo, memoryFragmentDBTypes, false, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memoryFragmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memoryFragmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemoryFragments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMemoryFragmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	memoryFragmentOne := &MemoryFragment{}
	memoryFragmentTwo := &MemoryFragment{}
	if err = randomize.Struct(seed, memoryFragmentOne, memoryFragmentDBTypes, false, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}
	if err = randomize.Struct(seed, memoryFragmentTwo, memoryFragmentDBTypes, false, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = memoryFragmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = memoryFragmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func memoryFragmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func memoryFragmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MemoryFragment) error {
	*o = MemoryFragment{}
	return nil
}

func testMemoryFragmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MemoryFragment{}
	o := &MemoryFragment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MemoryFragment object: %s", err)
	}

	AddMemoryFragmentHook(boil.BeforeInsertHook, memoryFragmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	memoryFragmentBeforeInsertHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.AfterInsertHook, memoryFragmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	memoryFragmentAfterInsertHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.AfterSelectHook, memoryFragmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	memoryFragmentAfterSelectHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.BeforeUpdateHook, memoryFragmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	memoryFragmentBeforeUpdateHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.AfterUpdateHook, memoryFragmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	memoryFragmentAfterUpdateHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.BeforeDeleteHook, memoryFragmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	memoryFragmentBeforeDeleteHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.AfterDeleteHook, memoryFragmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	memoryFragmentAfterDeleteHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.BeforeUpsertHook, memoryFragmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	memoryFragmentBeforeUpsertHooks = []MemoryFragmentHook{}

	AddMemoryFragmentHook(boil.AfterUpsertHook, memoryFragmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	memoryFragmentAfterUpsertHooks = []MemoryFragmentHook{}
}

func testMemoryFragmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemoryFragmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(memoryFragmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMemoryFragmentToOneMemoryUsingMemory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MemoryFragment
	var foreign Memory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, memoryDBTypes, false, memoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Memory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MemoryID, foreign.UUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Memory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.UUID, foreign.UUID) {
		t.Errorf("want: %v, got %v", foreign.UUID, check.UUID)
	}

	ranAfterSelectHook := false
	AddMemoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Memory) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MemoryFragmentSlice{&local}
	if err = local.L.LoadMemory(ctx, tx, false, (*[]*MemoryFragment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Memory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Memory = nil
	if err = local.L.LoadMemory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Memory == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMemoryFragmentToOneSetOpMemoryUsingMemory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemoryFragment
	var b, c Memory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memoryFragmentDBTypes, false, strmangle.SetComplement(memoryFragmentPrimaryKeyColumns, memoryFragmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memoryDBTypes, false, strmangle.SetComplement(memoryPrimaryKeyColumns, memoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, memoryDBTypes, false, strmangle.SetComplement(memoryPrimaryKeyColumns, memoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Memory{&b, &c} {
		err = a.SetMemory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Memory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MemoryFragments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MemoryID, x.UUID) {
			t.Error("foreign key was wrong value", a.MemoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MemoryID))
		reflect.Indirect(reflect.ValueOf(&a.MemoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MemoryID, x.UUID) {
			t.Error("foreign key was wrong value", a.MemoryID, x.UUID)
		}
	}
}

func testMemoryFragmentToOneRemoveOpMemoryUsingMemory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MemoryFragment
	var b Memory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, memoryFragmentDBTypes, false, strmangle.SetComplement(memoryFragmentPrimaryKeyColumns, memoryFragmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, memoryDBTypes, false, strmangle.SetComplement(memoryPrimaryKeyColumns, memoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMemory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMemory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Memory().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Memory != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MemoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MemoryFragments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMemoryFragmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemoryFragmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MemoryFragmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMemoryFragmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MemoryFragments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	memoryFragmentDBTypes = map[string]string{`UUID`: `uuid`, `CreatedAt`: `timestamp without time zone`, `ContentOriginal`: `text`, `ContentRefined`: `text`, `IsRefined`: `boolean`, `IsEmbedded`: `boolean`, `MemoryID`: `uuid`}
	_                     = bytes.MinRead
)

func testMemoryFragmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(memoryFragmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(memoryFragmentAllColumns) == len(memoryFragmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMemoryFragmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(memoryFragmentAllColumns) == len(memoryFragmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MemoryFragment{}
	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, memoryFragmentDBTypes, true, memoryFragmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(memoryFragmentAllColumns, memoryFragmentPrimaryKeyColumns) {
		fields = memoryFragmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			memoryFragmentAllColumns,
			memoryFragmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MemoryFragmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMemoryFragmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(memoryFragmentAllColumns) == len(memoryFragmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MemoryFragment{}
	if err = randomize.Struct(seed, &o, memoryFragmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemoryFragment: %s", err)
	}

	count, err := MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, memoryFragmentDBTypes, false, memoryFragmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MemoryFragment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MemoryFragment: %s", err)
	}

	count, err = MemoryFragments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
